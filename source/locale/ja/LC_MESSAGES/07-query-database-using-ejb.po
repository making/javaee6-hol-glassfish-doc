# Japanese translations for Java EE 6 Hands-on Lab package.
# Copyright (C) 2012, Arun Gupta
# This file is distributed under the same license as the Java EE 6 Hands-on Lab package.
# Toshiaki Maki <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Java EE 6 Hands-on Lab 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-26 20:42\n"
"PO-Revision-Date: 2012-09-26 20:37+0900\n"
"Last-Translator: Toshiaki Maki <>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 228dcf60c93c40ad82094bad8095ed88
#: ../../source/07-query-database-using-ejb.rst:2
msgid "Query the Database using EJB and Refactor the Servlet"
msgstr "サーブレットをリファクタリングし、EJBを使ってデーターベースに問い合わせ"

# 3d36593bb4ec4f5087cadbada5158bb3
#: ../../source/07-query-database-using-ejb.rst:4
msgid ""
"Java EE 6 provides a simplified definition and packaging for EJBs. Any POJO "
"can be converted into an EJB by adding a single annotation (``@Stateless``, "
"``@Stateful``, or ``@Singleton``). No special packaging is required for EJBs "
"as they can be packaged in a WAR file in the ``WEB-INF/classes`` directory."
msgstr ""
"Java EE 6ではEJBの定義とパッケージングが簡素化されています。一つのアノテーション( ``@Stateless`` 、 ``@Stateful`` 、または ``@Singleton`` )を付与するだけでPOJOがEJBに変換されます。EJBはWARファイル内の ``WEB-INF/classes`` ディレクトリにパッケージングされ、特殊なパッケージングは必要ありません。"

# 55bc2b540215421590a106d01ad51a71
#: ../../source/07-query-database-using-ejb.rst:10
msgid "This section will create an EJB to query the database."
msgstr "このセクションではデータベースに問い合わせるEJBを作成します。"

# b6669caf717749f2829b1e44c601c1ab
#: ../../source/07-query-database-using-ejb.rst:12
msgid ""
"1. Create a new stateless EJB. Right-click on “org.glassfish.samples” "
"package, select “New”, “Session Bean...”, specify the EJB Name as "
"“CustomerSessionBean” as shown. Take all the defaults, and click on “Finish”."
msgstr ""
"1ステートレスEJBを新規作成します。”org.glassfish.sample”パッケージで右クリックして、"
"”New”、”Session Bean…”を選択し、EJB名に”CustomerSessionBean”を入力してください。"
"以下のように、全てデフォルトのまま”完了”をクリックしてください。"

# 83a1c59dafc648f4b15cd451c536230b
#: ../../source/07-query-database-using-ejb.rst:19
msgid ""
"This will create a stateless EJB. Notice the generated EJB does not "
"implements an interface and this single class represents the EJB. This is a "
"new feature of EJB 3.1."
msgstr ""
"これでステートレスEJB  が作成されます。生成されたEJBがインタフェースを実装しておらず、"
"単一のクラスがEJBを表現していることに着目してください。これはEJB 3.1の新機能です。"

# 06e02ba87d754b3aa363edab46eec701
#: ../../source/07-query-database-using-ejb.rst:23
msgid ""
"2. EJBs are not re-entrant and so we can inject an instance of "
"``EntityManager``, as opposed to ``EntityManagerFactory`` in the Servlet, as "
"shown:"
msgstr ""
"2EJBは再入可能ではないので、Servletで ``EntityManagerFactory`` をインジェクションしていたのに対し、"
"以下のように ``EntityManager`` のインスタンスをインジェクションできます。"

# a52ad012024e4974b36c9e7a72fc1f27
#: ../../source/07-query-database-using-ejb.rst:32
msgid ""
"Resolve the imports by right-clicking on the editor pane and selecting “Fix "
"Imports”."
msgstr ""
"エディタパネルを右クリックし、“Fix Imports”を選択し、インポートを解決してください。"

# 055ad1aff1084fb48a7bed378194b86c
#: ../../source/07-query-database-using-ejb.rst:34
msgid "Add the following method in the EJB:"
msgstr "EJBに次のメソッドを追加してください。"

# dc02fa0f43f64e36926e820c9fdeec2a
#: ../../source/07-query-database-using-ejb.rst:42
msgid ""
"The implementation here is similar to the code used in the Servlet earlier. "
"Fix the imports."
msgstr ""
"ここでの実装は、先ほどServletで使用したものと似ています。"

# fc93c727ea5e48f8a3e87d77276f9819
#: ../../source/07-query-database-using-ejb.rst:45
msgid ""
"That's all it takes to create an EJB – no deployment descriptors and no "
"special packaging. In this case the EJB is packaged in a WAR file."
msgstr ""
"たったこれだけでEJBを作成できます。デプロイメント記述子や特別なパッケージングは必要ありません。この場合はEJBはWARファイルにパッケージングされます。"

# 22feb552e6ab40139d8640b595e30c98
#: ../../source/07-query-database-using-ejb.rst:48
msgid ""
"4. The database access code in the Servlet can now be removed and all of "
"that functionality can be delegated to this EJB. This can be done by "
"replacing the following code from the Servlet:"
msgstr ""
"サーブレット中のデータベースアクセスコードをなくせます。"
"そして、すべての機能がEJBに委譲させることができます。サーブレット中のコードを次のように置換してください。"

# c52336a46be742f3a36cd5196209e454
# b4bbb3d858654a0db8af20d9e2ee96f5
#: ../../source/07-query-database-using-ejb.rst:56
#: ../../source/07-query-database-using-ejb.rst:71
msgid "with"
msgstr "を"

# 438483202e744592af030bfea3f3c3e9
#: ../../source/07-query-database-using-ejb.rst:62
msgid "And replacing the following code:"
msgstr "に。そして次のコードを"

# 8b883338a04e4ba5b40d34f495a14b62
#: ../../source/07-query-database-using-ejb.rst:78
msgid ""
"Notice how an EJB is easily injected using the ``@EJB`` annotation and is "
"then used to invoke the business method."
msgstr ""
"に置換してください。 ``@EJB`` アノテーションを使用することでこんなに簡単にEJBをインジェクションでき、"
"ビジネスメソッドを呼び出すことができることに着目してください。"

# e3dd0317e4d742f4a0fa87de6689815b
#: ../../source/07-query-database-using-ejb.rst:81
msgid ""
"Refreshing “http://localhost:8080/JavaEE6SampleApp/TestServlet” displays the "
"output as shown."
msgstr ""
"“http://localhost:8080/JavaEE6SampleApp/TestServlet” を再読み込みすれば以下のように表示されます"

# bdb9444af03f44d3b2c004df9ec8c961
#: ../../source/07-query-database-using-ejb.rst:86
msgid ""
"This is almost the same output as shown earlier, and that's the whole point! "
"EJBs are better suited for database access as all methods are implicitly "
"transactional. This will be more apparent when we add code to insert values "
"in the database table. Using an EJB, instead of Servlet, will not require to "
"start and commit a transaction explicitly."
msgstr ""
"これは先ほどの出力結果とほとんど同じであり、そこがポイントです。"
"EJBでは全てのメソッドでトランザクション管理が自動的に行われるため、"
"データベースアクセスにより向いています。データベースに値を登録するコードを追加"
"すればこの利点はより明白になるでしょう。サーブレットの代わりにEJBを使用することで"
"トランザクションの明示的な開始、コミットを行う必要がなくなるでしょう。"

# ccf619f34773435a8641dd976e849443
#: ../../source/07-query-database-using-ejb.rst:94
msgid ""
"The only difference from the previous output is the updated timestamp and "
"the access count has increased by 1."
msgstr ""
"先ほどの出力結果との違いはタイムスタンプが更新されていることと、アクセス回数が1増えていることだけです。"
